import {
  Client,
  GatewayIntentBits,
  Partials,
  EmbedBuilder,
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder,
  Events,
  SlashCommandBuilder,
  PermissionsBitField,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
} from 'discord.js';
import express from 'express';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';

dotenv.config();

// ====== KLIENT ======
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
  partials: [Partials.Message, Partials.Channel, Partials.GuildMember],
});

// ====== START ======
client.once(Events.ClientReady, () => {
  console.log(`‚úÖ Zalogowano jako ${client.user.tag}`);
});

// ====== KOMENDY TEKSTOWE ======
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

// --- !regulamin ---
if (message.content === '!regulamin') {
  const embed = new EmbedBuilder()
    .setColor('#ff0000')
    .setTitle('üî• Lava Shop √ó REGULAMIN üßæ')
    .setDescription(`
**NIE ZAPOZNAJƒÑC SIƒò Z REGULAMINEM NIE ZWALNIA CIƒò Z JEGO PRZESTRZEGANIA!**

> 1Ô∏è‚É£ Wulgaryzmy i wyzwiska ‚Äî przerwa lub ban.  
> 2Ô∏è‚É£ Nadmierne pingowanie ‚Äî przerwa 1d.  
> 3Ô∏è‚É£ Reklama innego serwera ‚Äî perm ban.  
> 4Ô∏è‚É£ Szanuj obs≈Çugƒô ‚Äî ka≈ºdy ma ≈ºycie prywatne.  
> 5Ô∏è‚É£ Pr√≥by oszustwa ‚Äî natychmiastowy ban.  
> 6Ô∏è‚É£ Admin ma prawo do kary po wielokrotnym ostrze≈ºeniu.

üß® *Regulamin mo≈ºe ulec zmianie.*
`)
    .setFooter({ text: 'Lava Shop ¬© 2025', iconURL: client.user.displayAvatarURL() });

  await message.channel.send({ embeds: [embed] });
}
}); // ‚Üê tu ZAMYKASZ handler messageCreate !!!
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  // üîπ !donut
  if (message.content === '!donut') {
    const embed = new EmbedBuilder()
      .setColor('#ff66cc')
      .setTitle('üç© CENNIK DONUTSMP')
      .setDescription(`
~~2m$~~ **3m$** ‚ûú **1z≈Ç**  
~~1 spawner~~ **1z≈Ç**  

**PO ZAKUPIE ZAPRASZAM**
<#1431301620628455474> üéüÔ∏è
`)
      .setFooter({ text: 'Lava Shop ¬© 2025', iconURL: message.client.user.displayAvatarURL() });

    await message.channel.send({ embeds: [embed] });
  }

  // üîπ !ms
  if (message.content === '!ms') {
    const embed = new EmbedBuilder()
      .setColor('#00ffcc')
      .setTitle('üí∏ CENNIK MINESTAR.PL LF')
      .setDescription(`
~~3500$~~ **5000$**  ‚ûú **1z≈Ç**  
~~3500$~~ **5200$**  ‚ûú **1z≈Ç (PRZY ZAKUPIE 100Z≈Å +)**  

**PO ZAKUPIE ZAPRASZAM**
<#1431301620628455474> üéüÔ∏è
`)
      .setFooter({ text: 'Lava Shop ¬© 2025', iconURL: message.client.user.displayAvatarURL() });

    await message.channel.send({ embeds: [embed] });
  }

  // üîπ !sell
  if (message.content === '!sell') {
    const embed = new EmbedBuilder()
      .setColor('#33ff77')
      .setTitle('üíµ SPRZEDAJ SWOJE ITEMY üíµ')
      .setDescription(`
**üí¨ CHCESZ SPRZEDAƒÜ SWOJE ITEMY ZA PRAWDZIWE PIENIƒÑDZE?**
Skupujemy itemy/waluty o warto≈õci co najmniej **20z≈Ç** üí∏

**üí∞ ILE DOSTANIESZ ZA SWOJE ITEMKI?**
Oko≈Ço **50-70%** warto≈õci cennika (w zale≈ºno≈õci od typu item√≥w).

**üí≥ METODY P≈ÅATNO≈öCI:**
> üî¥ PaySafeCard  
> üü¢ BLIK  
> üõ†Ô∏è Kupno rang/us≈Çug  
> üíô PayPal  

Po wiƒôcej informacji ‚Üí <#1431301620628455474> üéüÔ∏è
`)
      .setFooter({ text: 'Lava Shop ¬© 2025', iconURL: message.client.user.displayAvatarURL() });

    await message.channel.send({ embeds: [embed] });
  }
});

// ====== KONFIGURACJA KALKULATORA ======
const KURSY = {
  "anarchia.gg": {
    kupno: 4500,    // 1 z≈Ç ‚Üí 4500
    sprzeda≈º: 6000, // 1 z≈Ç ‚Üí 6000
  },
  "donutsmp": {
    kupno: 3_000_000,    // 1 z≈Ç ‚Üí 3M
    sprzeda≈º: 5_000_000, // 1 z≈Ç ‚Üí 5M
  },
};

// ====== KOMENDA !kalkulator / przycisk ======
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;
  if (message.content === '!kalkulator' || message.content === '/lc') {
    const embed = new EmbedBuilder()
      .setTitle('üí∞ Kalkulator Lava Shop')
      .setDescription('Kliknij przycisk poni≈ºej, aby obliczyƒá warto≈õƒá üí∏')
      .setColor(0x5865f2);

    const button = new ButtonBuilder()
      .setCustomId('open_kalkulator')
      .setLabel('üßÆ Otw√≥rz kalkulator')
      .setStyle(ButtonStyle.Primary);

    const row = new ActionRowBuilder().addComponents(button);
    await message.channel.send({ embeds: [embed], components: [row] });
  }
});

// ====== OBS≈ÅUGA INTERAKCJI ======
client.on(Events.InteractionCreate, async (interaction) => {
  try {
    // otwarcie modala
    if (interaction.isButton() && interaction.customId === 'open_kalkulator') {
      const modal = new ModalBuilder()
        .setCustomId('kalkulator_modal')
        .setTitle('üí∞ Kalkulator transakcji');

      const metoda = new TextInputBuilder()
        .setCustomId('metoda')
        .setLabel('Metoda p≈Çatno≈õci (PSC / BLIK / PayPal)')
        .setStyle(TextInputStyle.Short)
        .setRequired(true);

      const typ = new TextInputBuilder()
        .setCustomId('typ')
        .setLabel('Kupno / Sprzeda≈º')
        .setStyle(TextInputStyle.Short)
        .setRequired(true);

      const serwer = new TextInputBuilder()
        .setCustomId('serwer')
        .setLabel('Serwer (Anarchia.gg / DonutSMP)')
        .setStyle(TextInputStyle.Short)
        .setRequired(true);

      const kwota = new TextInputBuilder()
        .setCustomId('kwota')
        .setLabel('Kwota (z≈Ç)')
        .setStyle(TextInputStyle.Short)
        .setRequired(true);

      modal.addComponents(
        new ActionRowBuilder().addComponents(metoda),
        new ActionRowBuilder().addComponents(typ),
        new ActionRowBuilder().addComponents(serwer),
        new ActionRowBuilder().addComponents(kwota)
      );

      await interaction.showModal(modal);
      return;
    }

    // obs≈Çuga wynik√≥w z modala
    if (interaction.isModalSubmit() && interaction.customId === 'kalkulator_modal') {
      const metodaRaw = interaction.fields.getTextInputValue('metoda');
      const typRaw = interaction.fields.getTextInputValue('typ');
      const serwerRaw = interaction.fields.getTextInputValue('serwer');
      const kwotaRaw = interaction.fields.getTextInputValue('kwota');

      const metoda = metodaRaw.trim().toLowerCase();
      const typ = typRaw.trim().toLowerCase();
      const serwer = serwerRaw.trim().toLowerCase();
      const kwota = parseFloat(kwotaRaw.replace(',', '.'));

      const dozwoloneMetody = ['psc', 'blik', 'paypal'];
      const dozwoloneTypy = ['kupno', 'sprzedaz', 'sprzeda≈º', 'buy', 'sell'];

      if (!dozwoloneMetody.includes(metoda))
        return interaction.reply({ content: '‚ùå Niepoprawna metoda p≈Çatno≈õci.', flags: 64 });

      if (!dozwoloneTypy.includes(typ))
        return interaction.reply({ content: '‚ùå Niepoprawny typ (Kupno/Sprzeda≈º).', flags: 64 });

      if (isNaN(kwota) || kwota <= 0)
        return interaction.reply({ content: '‚ùå Podaj poprawnƒÖ kwotƒô.', flags: 64 });

      let serwerKey = null;
      if (serwer.includes('anarchia')) serwerKey = 'anarchia.gg';
      else if (serwer.includes('donut')) serwerKey = 'donutsmp';
      else
        return interaction.reply({ content: '‚ùå Nieznany serwer. Dostƒôpne: Anarchia.gg, DonutSMP', flags: 64 });

      const typKey = ['sell', 'sprzedaz', 'sprzeda≈º'].includes(typ) ? 'sprzeda≈º' : 'kupno';
      const kurs = KURSY[serwerKey]?.[typKey];

      if (!kurs)
        return interaction.reply({ content: '‚ùå Brak kursu dla tego typu transakcji.', flags: 64 });

      // obliczenia
      let wynik = kwota * kurs;

      // prowizja 10% przy PSC
      if (metoda === 'psc') wynik *= 0.9;

      const embed = new EmbedBuilder()
        .setTitle('üìä Wynik kalkulacji')
        .setColor(0x2ecc71)
        .addFields(
          { name: 'üí≥ Metoda', value: metoda.toUpperCase(), inline: true },
          { name: 'üßæ Typ', value: typKey.toUpperCase(), inline: true },
          { name: 'üñ•Ô∏è Serwer', value: serwerKey, inline: true },
          { name: 'üí∞ Kwota (z≈Ç)', value: `${kwota}`, inline: true },
          { name: 'üìà Wynik', value: typKey === 'kupno'
              ? `**Otrzymasz ${wynik.toLocaleString()}**`
              : `**Sprzedajesz za ${wynik.toLocaleString()}**`,
            inline: false
          },
          ...(metoda === 'psc'
            ? [{ name: '‚ö†Ô∏è Uwaga', value: 'Odjƒôto 10% prowizji za PSC', inline: false }]
            : [])
        )
        .setFooter({ text: 'Lava Shop √ó Kalkulator', iconURL: interaction.client.user.displayAvatarURL() })
        .setTimestamp();

      await interaction.reply({ embeds: [embed], flags: 64 });
    }
  } catch (err) {
    console.error('‚ùå B≈ÇƒÖd w kalkulatorze:', err);
  }
});
    // ====== AUTOROLE ======
client.on(Events.InteractionCreate, async (interaction) => {
  try {
    if (interaction.isButton() && interaction.customId.startsWith('role_')) {
      const roleIds = {
        role_konkursy: '1431343816035664063',
        role_restock: '1431343873254232196',
        role_kupie_kase: '1431343922579378196',
      };

      const roleId = roleIds[interaction.customId];
      if (!roleId) return; // ‚úÖ teraz jest wewnƒÖtrz funkcji

      const role = interaction.guild.roles.cache.get(roleId);
      const member = interaction.guild.members.cache.get(interaction.user.id);

      if (!role)
        return interaction.reply({ content: '‚ùå Nie mogƒô znale≈∫ƒá tej roli!', ephemeral: true });

      if (member.roles.cache.has(role.id)) {
        await interaction.reply({ content: `‚ö†Ô∏è Masz ju≈º rolƒô **${role.name}**!`, ephemeral: true });
      } else {
        await member.roles.add(role);
        await interaction.reply({ content: `‚úÖ Otrzyma≈Çe≈õ rolƒô **${role.name}**!`, ephemeral: true });
      }
    }
  } catch (err) {
    console.error('‚ùå B≈ÇƒÖd w InteractionCreate (role):', err);
  }
});
// ====== G≈ÅOSOWANIE LEGIT + /lc ======
client.on(Events.InteractionCreate, async (interaction) => {
  try {
    // === G≈ÅOSOWANIE LEGIT ===
    if (interaction.isButton() && interaction.customId === 'legit_vote') {
      if (!global.votedUsers) global.votedUsers = new Set();
      if (!global.votes) global.votes = 0;

      if (global.votedUsers.has(interaction.user.id)) {
        await interaction.reply({ content: '‚ùå Ju≈º odda≈Çe≈õ sw√≥j g≈Ços!', flags: 64 });
        return;
      }

      global.votedUsers.add(interaction.user.id);
      global.votes++;

      const message = await interaction.message.fetch();
      const embed = EmbedBuilder.from(message.embeds[0]);
      const button = new ButtonBuilder()
        .setCustomId('legit_vote')
        .setLabel(`‚úÖ TAK (${global.votes})`)
        .setStyle(ButtonStyle.Success);
      const row = new ActionRowBuilder().addComponents(button);
      await interaction.update({ embeds: [embed], components: [row] });
      return;
    }

    // === SLASH KOMENDA /lc ===
    if (interaction.isChatInputCommand() && interaction.commandName === 'lc') {
      const kwota = interaction.options.getString('kwota');
      const serwer = interaction.options.getString('serwer');

      const embed = new EmbedBuilder()
        .setColor('#00ff73')
        .setAuthor({ name: 'Lava Shop - BOT', iconURL: interaction.client.user.displayAvatarURL() })
        .setTitle('‚úÖ Legitcheck √ó Lava Shop')
        .setDescription(
          `‚úÖ **x Legit?** kupi≈Çe≈õ **${kwota}** na serwerze **${serwer}**\n` +
          `‚úÖ **x Napisz Legit je≈õli transakcja przesz≈Ça pomy≈õlnie!**\n\n` +
          `Podziel siƒô swojƒÖ opiniƒÖ o **Lava Shop** na <#1431301620628455474>!`
        );

      await interaction.reply({ embeds: [embed] });
      return;
    }

  } catch (err) {
    console.error('‚ùå B≈ÇƒÖd w InteractionCreate:', err);
  }
});

// ====== POWITALNIA ======
client.on(Events.GuildMemberAdd, async (member) => {
  try {
    const channelId = process.env.WELCOME_CHANNEL_ID;
    const channel = member.guild.channels.cache.get(channelId);
    if (!channel) return;

    const embed = new EmbedBuilder()
      .setColor('#ff6600')
      .setAuthor({ name: 'Lava Shop √ó WITAMY' })
      .setThumbnail(member.guild.iconURL({ dynamic: true }))
      .setDescription(
       
        `√ó Witaj **${member.user.username}** na Lava Shop!\n\n` +
         
        `√ó Jeste≈õ ju≈º **${member.guild.memberCount}** osobƒÖ na naszym serwerze!\n\n` +
          
        `√ó Mamy nadziejƒô, ≈ºe zostaniesz z nami na d≈Çu≈ºej!`
      )
      .setTimestamp()
      .setFooter({ text: 'Lava Shop - Bot | APL' });

    await channel.send({ embeds: [embed] });
  } catch (err) {
    console.error('‚ùå B≈ÇƒÖd w powitalni:', err);
  }
});

// ====== KOMENDA /lc ======
client.once(Events.ClientReady, async () => {
  const commands = [
    new SlashCommandBuilder()
      .setName('lc')
      .setDescription('‚úÖ Stw√≥rz wiadomo≈õƒá LegitCheck')
      .addStringOption((opt) =>
        opt.setName('kwota').setDescription('Ile u≈ºytkownik kupi≈Ç (np. 70k)').setRequired(true)
      )
      .addStringOption((opt) =>
        opt.setName('serwer').setDescription('Na jakim serwerze (np. ana.1f)').setRequired(true)
      ),
  ].map((cmd) => cmd.toJSON());

  await client.application.commands.set(commands);
  console.log('‚úÖ Komenda /lc zosta≈Ça zarejestrowana!');
});

client.on(Events.InteractionCreate, async (interaction) => {
  if (!interaction.isChatInputCommand()) return;
  if (interaction.commandName !== 'lc') return;

  const kwota = interaction.options.getString('kwota');
  const serwer = interaction.options.getString('serwer');

  const embed = new EmbedBuilder()
    .setColor('#00ff73')
    .setAuthor({ name: 'Lava Shop - BOT', iconURL: client.user.displayAvatarURL() })
    .setTitle('‚úÖ Legitcheck √ó Lava Shop')
    .setDescription(
      `‚úÖ **x Legit?** kupi≈Çe≈õ **${kwota}** na serwerze **${serwer}**\n` +
        `‚úÖ **x Napisz Legit je≈õli transakcja przesz≈Ça pomy≈õlnie!**\n\n` +
        `Podziel siƒô swojƒÖ opiniƒÖ o **Lava Shop** na <#1431301620628455474>!`
    );

  await interaction.reply({ embeds: [embed] });
});

// ====== SYSTEM LEGITCHECK (z numeracjƒÖ) ======
const LEGIT_DB_PATH = path.join(process.cwd(), 'legit_db.json');
function loadLegitDB() {
  try {
    if (!fs.existsSync(LEGIT_DB_PATH)) return { entries: {} };
    return JSON.parse(fs.readFileSync(LEGIT_DB_PATH, 'utf8'));
  } catch {
    return { entries: {} };
  }
}
function saveLegitDB(db) {
  fs.writeFileSync(LEGIT_DB_PATH, JSON.stringify(db, null, 2), 'utf8');
}
const legitDB = loadLegitDB();
const LEGIT_CHANNEL_ID = process.env.LEGIT_CHANNEL_ID;

client.on('messageCreate', async (message) => {
  try {
    if (message.author?.bot) return;
    if (!LEGIT_CHANNEL_ID || message.channel.id !== LEGIT_CHANNEL_ID) return;
    if (!message.attachments.size) return;

    const attachment = message.attachments.find((a) =>
      a.contentType?.startsWith('image')
    );
    if (!attachment) return;

    if (legitDB.entries[message.id]) return;
    const used = new Set(Object.values(legitDB.entries).map((e) => e.num));
    const num = (() => { let n = 1; while (used.has(n)) n++; return n; })();

    const embed = new EmbedBuilder()
      .setColor('#1f8b4c')
      .setTitle(`‚úÖ Legitcheck #${num}`)
      .setImage(attachment.url)
      .setFooter({ text: 'System legitcheck √ó LEG SHOP' })
      .setTimestamp();

    const botMsg = await message.channel.send({ embeds: [embed] });
    legitDB.entries[message.id] = { num, botMessageId: botMsg.id };
    saveLegitDB(legitDB);
  } catch (err) {
    console.error('‚ùå B≈ÇƒÖd w handlerze legit image:', err);
  }
});

client.on('messageDelete', async (message) => {
  if (!LEGIT_CHANNEL_ID || message.channel?.id !== LEGIT_CHANNEL_ID) return;
  const entry = legitDB.entries[message.id];
  if (!entry) return;

  const botMsg = await message.channel.messages.fetch(entry.botMessageId).catch(() => null);
  if (botMsg) await botMsg.delete().catch(() => null);

  delete legitDB.entries[message.id];
  saveLegitDB(legitDB);
});

// ====== EXPRESS KEEPALIVE ======
const app = express();
const PORT = process.env.PORT || 10000;
app.get('/', (req, res) => res.send('‚úÖ Lava Shop bot dzia≈Ça poprawnie!'));
app.listen(PORT, () => console.log(`üåê Serwer HTTP dzia≈Ça na porcie ${PORT}`));

// ====== LOGOWANIE ======
client.login(process.env.TOKEN);










